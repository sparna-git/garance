---
layout: main.njk
pagination:
    data: vocabularies.graph
    size: 1
    alias: vocabulary
permalink: "{{ locale }}/vocabularies/{{ vocabulary.id | localName }}/"
---

{% set jsonScheme = vocabularies["@context"] | json %}
{% set sortInverseInScheme = vocabulary.inverse_inScheme | jsonSort("prefLabel") %}

<main class="section_body" id="vocabulary">
  {# Header #}
  <div class="row">
    <div class="col-md">
        <h1 class="ConceptScheme-title">{{ vocabulary.title | lang('fr') }}</h1>
    </div>
    {# URI #}
    <p class="concept-URI">
        <code >
            <a href="{{ jsonScheme | getURL(vocabulary.id) }}">{{ jsonScheme | getURL(vocabulary.id) }}</a>
        </code>          
    </p>
    {# Description #}
    <p>{{ vocabulary.description }}</p>
   
    {# Creator #}
    {% if vocabulary.creator %}
    <div class="row">
      <div class="col-2">
        {% set title = "dcterms:creator" | i18n %}
        <h6><span>{{ title }}</span></h6>
      </div>
      <div class="col-6">
        {% for c in vocabulary.creator %}
          <div class="row">
            <p>
            <a href="{{ c["foaf:homepage"] }}">{{ c["foaf:name"]["@value"] }}</a>
            
            <span>
                <a href="mailto:{{ c["foaf:mbox"] }}"><i class="fa-solid fa-envelope"></i></a>
            </span>
            </p>
          </div>
        {% endfor %}
      </div>
    </div>  
    {% endif %}
    
    {# dcterms:modified #}
    {% if vocabulary.datemodified %}
      <div class="row">
        <div class="col-2">
          {% set title = "dcterms:modified" | i18n %}
          <h6><span>{{ title }}</span></h6>
        </div>
        <div class="col-6">
          <span>{{ vocabulary.datemodified | getMaxDate }}</span>
        </div>  
      </div>
    {% endif %}

    {# dc:coverage #}
    {% if vocabulary.coverage %}
      <div class="row">
        <div class="col-2">
          {% set title = "dc:coverage" | i18n %}
          <h6><span>{{ title }}</span></h6>
        </div>
        <div class="col-6">
          <span>{{ vocabulary.coverage | lang('fr') }}</span>
        </div>  
      </div>  
    {% endif %}

    {# dc:rights #}
    {% if vocabulary.rights %}
      <div class="row">
        <div class="col-2">
          {% set title = "dc:rights" | i18n %}
          <h6><span>{{ title }}</span></h6>
        </div>
        <div class="col-10">
          <p><span>{{ vocabulary.rights | lang('fr') }}</span></p>
        </div> 
      </div>
    {% endif %}

    {# skos:historyNote #}
    {% if vocabulary.historyNote %}
      <div class="row">
        <div class="col-2">
          {% set title = "skos:historyNote" | i18n %}
          <h6><span>{{ title }}</span></h6>
        </div>
        <div class="col-10">
          {% set hn = vocabulary.historyNote["@value"] | replace("html:","") %}
          {{ hn }}
        </div>
      </div>
    {% endif %}

    {# Resource #}
    {% if vocabulary.distribution %}
    <div class="row botton_marging">
        <div class="col-2">
          <h6><span>{{ "dcat:distribution" | i18n }}</span></h6>
        </div>
        <div class="col-10">
          {% for dist in vocabulary.distribution %}
          <span>
          <a href="{{ dist['dcat:downloadURL'].id }}">
            {% set mediaType = dist["dcat:mediaType"].id | string %}
            {% if mediaType == "http://www.iana.org/assignments/media-types/text/csv" %}
            <img src="https://img.shields.io/badge/Format-CSV-blue.png" alt="CSV">
            {% endif %}
            {% if mediaType == "https://www.iana.org/assignments/media-types/application/rdf+xml" %}
            <img src="https://img.shields.io/badge/Format-TTL-blue.png" alt="RDF/XML">
            {% endif %}
          </a>
          </span>
          {% endfor %}
        </div>
    </div>
    {% endif %}

    {# Additionnal class #}
    {% if sortInverseInScheme %}
      {% for conceptType in sortInverseInScheme[0].type %}
        {% if conceptType != "Concept" %}
          <div class="alert alert-secondary" role="alert">
              <em>{{ "These concepts have all the type" | i18n }} “<b>{{ conceptType | i18n }}</b>”.</em>
          </div>
        {% endif %}
      {% endfor %}
    {% endif %}    
  </div>

  <hr>

  {# Tree #}
  {% set flagPrintTree =  vocabulary.inverse_inScheme | hasBroader %}
  {% if flagPrintTree %}
  <div class="row">
    <div class='col'>
      <svg width="1200" height="1400" even></svg>
    </div>
  </div>
  {% endif %}
  
  {# Liste de concepts #}
  
  {% for concepts in sortInverseInScheme %}
  <div class="row"> 
      <div class="col">
        {% set conceptId = concepts | json %}
        {# Title #}
        {% if concepts.notation %}
          <h5 class="concept-title" id="{{ concepts.notation }}"><small>{{ concepts.notation }} - </small>{{ concepts.prefLabel | lang('fr') }}
          {# if Status = iso-thes:status = "candidat" #}
          {% if concepts.isoThesStatus %}
            <i class="fa-solid fa-diamond-exclamation"></i>          
          {% endif %}
          </h5>
        {% else %}
          <h5 class="concept-title" id="{{ concepts.id | localName }}">{{ concepts.prefLabel | lang('fr') }}
          {# if Status = iso-thes:status = "candidat" #}
          {% if concepts.isoThesStatus %}
            <i class="fa-solid fa-diamond-exclamation"></i>          
          {% endif %}
          </h5>
        {% endif %}        
        
        {# URI #}
        <p class="concept-URI">
          <code>
            <a href="{{ jsonScheme | getURL(concepts.id) }}">{{ jsonScheme | getURL(concepts.id) }}</a>
          </code>
          <br /> 
          {# Sparql Query #}
        </p>

        <div class="container">

          {# breadcrumb #}
          {% if concepts.broader %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:broader" | i18n %}
                <h6>{{ title }}</h6>
              </div>
              <div class="col">
                <ul class="breadcrumb">
                  <li>
                    <a href="{{ jsonScheme | getURL(vocabulary.id) }}">{{ vocabulary.title | lang('fr') }}</a>
                  </li>                
                
                  {% if concepts.broader %}

                    {% if concepts.broader.broader.broader.broader %}                    
                      <li>
                        <a href="{{ jsonScheme | getURL(concepts.broader.broader.broader.broader.id) }}">{{ concepts.broader.broader.broader.broader.prefLabel | lang('fr') }}</a>
                      </li>
                    {% endif %}
                    
                    {% if concepts.broader.broader.broader %}
                      <li>
                        <a href="{{ jsonScheme | getURL(concepts.broader.broader.broader.id) }}">{{ concepts.broader.broader.broader.prefLabel | lang('fr') }}</a>
                      </li>
                    {% endif %}

                    {% if concepts.broader.broader %}
                      <li>
                        <a href="{{ jsonScheme | getURL(concepts.broader.broader.id) }}">{{ concepts.broader.broader.prefLabel | lang('fr') }}</a>
                      </li>
                    {% endif %}

                    {% if concepts.broader %}
                      <li>
                        <a href="{{ jsonScheme | getURL(concepts.broader.id) }}">{{ concepts.broader.prefLabel | lang('fr') }}</a>
                      </li>
                    {% endif %}
                    <li>
                      {{ concepts.prefLabel | lang('fr') }}
                    </li> 
                  {% endif %}
                </ul>
              </div>
            </div>
          {% endif %}

          {# Synonyms #}
          {% if concepts.altLabel %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:altLabel" | i18n %}
                <h6>{{ title }}</h6>
              </div>
              <div class="col">
                <ul>
                  {%- for element in concepts.altLabel -%}
                    <li>{{ element["@value"] }}</li>                  
                  {%- endfor -%}
                </ul>
              </div>
            </div>
          {% endif %}

          {# skos:definition #}
          {% if concepts.definition %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:definition" | i18n %}
                <h6>{{ title }}</h6>                
              </div>
              <div class="col">
                <ul>
                  {%- for element in concepts.definition -%}
                    <li>{{ element["@value"] }}</li>                  
                  {%- endfor -%}
                </ul>
              </div>
            </div>
          {% endif %}

          {# Translation #}
          {% if concepts.prefLabel.length >= 2 %}
            <div class="row">
              <div class="col-1">
                <h6>Translations</h6>
              </div>
              <div class="col">
                <ul>
                {%- for element in concepts.prefLabel -%}
                  {% if element["@language"] != "fr" %}
                    <li>{{ element["@language"] }} : {{ element["@value"] }}</li>                  
                  {% endif %}  
                {%- endfor -%}
                </ul>
              </div>
            </div>
          {% endif %}

          {# scopeNote #}
          {% if concepts.scopeNote.length > 0 %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:scopeNote" | i18n %}
                <h6>{{ title }}</h6>                
              </div>
              <div class="col">
                <ul>
                  {%- for element in concepts.scopeNote -%}
                    <li>{{ element["@value"] }}</li>                  
                  {%- endfor -%}
                </ul>
              </div>
            </div>
          {% endif %}

          {# skos:example #}
          {% if concepts.example %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:example" | i18n %}
                <h6>{{ title }}</h6>                
              </div>
              <div class="col">
                {{ concepts.example | json }}
              </div>
            </div>
          {% endif %}
          
          {# skos:changeNote #}
          {% if concepts.changenote %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:changeNote" | i18n %}
                <h6>{{ title }}</h6>                
              </div>
              <div class="col">
                {% set cnotes = concepts.changenote | timeline("fr") %}
                {# timeline #}
                <div class="changeNote_container">
                  <div class="changeNote_wrapper">
                    <ul class="changeNote_sessions">
                    {% for t in cnotes %}
                      <li>
                        <div class="changeNote_date">{{ t.date }} : <span>{{ t.description }}</span></div>                        
                      </li>
                    {% endfor %}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          {% endif %}

          {# skos:exactMatch #}
          {% if concepts.exactMatch %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:exactMatch" | i18n %}
                <h6>{{ title }}</h6>
              </div>
              <div class="col">  
                <ul>  
                  {% for a in concepts.exactMatch %}
                    <li><a href="{{ a.id }}">{{ a.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          {% if concepts.narrower %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:narrower" | i18n %}
                <h6>{{ title }}</h6>
              </div>
              <div class="col">  
                <ul>
                  {% for narrowerConcept in concepts.narrower %}
                    <li>
                      <a href="#{{ narrowerConcept.id | localName }}">{{ narrowerConcept.prefLabel | lang("fr") | title }}</a>
                    </li>
                  {% endfor %}
                </ul>  
              </div>
            </div>
          {% endif %}

          {# skos:closeMatch #}
          {% if concepts.closeMatch %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:closeMatch" | i18n %}
                <h6>{{ title }}</h6>
              </div>
              <div class="col">  
                <ul>  
                  {% for a in concepts.closeMatch %}
                    <li><a href="{{ a.id }}">{{ a.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          {# skos:related #}
          {% if concepts.skosRelated %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:related" | i18n %}
                <h6>{{ title }}</h6>
              </div>    
              <div class="col">  
                <ul>  
                  {% for sr in concepts.skosRelated %}
                    <li><a href="{{ sr.id }}">{{ sr.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}
          
          {# skos:relatedMatch #}
          {% if concepts.relatedMatch %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:relatedMatch" | i18n %}
                <h6>{{ title }}</h6>
              </div>    
              <div class="col">  
                <ul>  
                  {% for a in concepts.relatedMatch %}
                    <li><a href="{{ a.id }}">{{ a.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          {# skos:narrowMatch #}
          {% if concepts.narrowMatch.length > 0 %}
            <div class="row">
              <div class="col-1">
                {% set title = "skos:narrowMatch" | i18n %}
                <h6>{{ title }}</h6>
              </div>    
              <div class="col">  
                <ul>  
                  {% for nm in concepts.narrowMatch %}
                    <li><a href="{{ nm.id }}">{{ nm.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

          {% if concepts.seeAlso.length > 0 %}
            <div class="row">
              <div class="col-1">
                {% set title = "rdfs:seeAlso" | i18n %}
                <h6>{{ title }}</h6>
              </div>    
              <div class="col">  
                <ul>  
                  {% for sa in concepts.seeAlso %}
                    <li><a href="{{ sa.id }}">{{ sa.id }}</a></li>
                  {% endfor %}
                </ul>
              </div>
            </div>
          {% endif %}

        </div>  

      </div>
    </div>
  <hr style="margin-top: 10px;">
  {% endfor %}
</main>

{# anchor #}
<script>
  // generate anchors on each h5 title
  anchors.options.placement = 'left';
  anchors.options.icon = '#';
  anchors.add('h5');
</script>

{# d3js #}
<script type="text/javascript">
  // recuperer tous les concepts
  const data = {{ vocabulary.inverse_inScheme | json }}
  /* THOMAS : il faut ajouter dans le tableau de data un noeud qui correspond à la racine de l'arbre à dessigner */
  const conceptScheme_Header = {"id": {{ vocabulary.id | json }},"prefLabel":{{ vocabulary.title | json }}}
  const title_conceptScheme = {{ vocabulary.prefLabel | json }}

  
    data.push(conceptScheme_Header);

      // Specify the charts’ dimensions. The height is variable, depending on the layout.
      const width = 928;
      const marginTop = 10;
      const marginRight = 20;
      const marginBottom = 10;
      const marginLeft = 40;

      const root = d3.stratify()
        .id((d) => d.id)
        .parentId((d) => {
          if(d.broader) {
            return d.broader.id
          } else { 
            if(d.type && d.type.includes("Concept")) return data.at(-1).id;
            else return null; 
          }
        })
      (data);

      const dx = 14;
      const dy = (width - marginRight - marginLeft) / (1 + root.height);

      // Define the tree layout and the shape for links.
      const tree = d3.tree().nodeSize([dx, dy]);
      const diagonal = d3.linkHorizontal().x(d => d.y).y(d => d.x);

      // Create the SVG container, a layer for the links and a layer for the nodes.
      const svg = d3.select("svg")
        //.attr("width", width)
        .attr("width", "100%")
        //.attr("height", dx)
        .attr("height", "80%")
        .attr("viewBox", [-marginLeft, -marginTop, width, dx])
        //.attr("style", "max-width: 100%; height: auto; font: 12px sans-serif;");
        .attr("style", "max-width: 100%; font: 12px sans-serif;");

      const gLink = svg.append("g")
          .attr("fill", "none")
          .attr("stroke", "#555")
          .attr("stroke-opacity", 0.4)
          .attr("stroke-width", 1.5);

      const gNode = svg.append("g")
          .attr("cursor", "pointer")
          .attr("pointer-events", "all");
    
      function update(event,source) {
          const duration = event?.altKey ? 2500 : 250; // hold the alt key to slow down the transition
          const nodes = root.descendants().reverse();
          const links = root.links();

          // Compute the new tree layout.
          tree(root);

          let left = root;
          let right = root;
          root.eachBefore(node => {
            if (node.x < left.x) left = node;
            if (node.x > right.x) right = node;
          });

          const height = right.x - left.x + marginTop + marginBottom;
          const transition = svg.transition()
              .duration(duration)
              //.attr("height", height)
              .attr("height", "80%")
              .attr("viewBox", [-marginLeft, left.x - marginTop, width, height])
              .tween("resize", window.ResizeObserver ? null : () => () => svg.dispatch("toggle"));
          
          // Update the nodes…
          const node = gNode.selectAll("g")
            .data(nodes, d => d.data.id);

          // Enter any new nodes at the parent's previous position.
          const nodeEnter = node.enter().append("g")
              .attr("transform", d => `translate(${source.y0},${source.x0})`)
              .attr("fill-opacity", 0)
              .attr("stroke-opacity", 0)
              .on("click", (event, d) => {
                d.children = d.children ? null : d._children;
                update(event, d);
              });
          
          nodeEnter.append("circle")
            .attr("r", 2.5)
            .attr("fill", d => d._children ? "#555" : "#999")
            .attr("stroke-width", 10);

          const nodeRef = nodeEnter.append("a")
            .attr("href", d => "#"+d.data.id.substring(d.data.id.lastIndexOf("/") + 1))

          nodeRef.append("text")
              .attr("dy", "0.40em")
              //.attr("x", d => d._children ? -6 : 6)
              .attr("x", d => d._children ? -6 : 6)
              .attr("text-anchor", d => d._children ? "end" : "start")
              // .attr("text-anchor", d => d.data.prefLabel ? "end" : "start")
              .text(d => d.data.prefLabel.filter(i => i["@language"] == "fr")[0]["@value"])
              .attr("stroke-linejoin", "round")
              .attr("stroke-width", 3)
              .attr("stroke", "white")
              .attr("paint-order", "stroke");
          
          // Transition nodes to their new position.
          const nodeUpdate = node.merge(nodeEnter).transition(transition)
              .attr("transform", d => `translate(${d.y},${d.x})`)
              .attr("fill-opacity", 1)
              .attr("stroke-opacity", 1);

          // Transition exiting nodes to the parent's new position.
          const nodeExit = node.exit().transition(transition).remove()
              .attr("transform", d => `translate(${source.y},${source.x})`)
              .attr("fill-opacity", 0)
              .attr("stroke-opacity", 0);

          // Update the links…
          const link = gLink.selectAll("path")
            //.data(links, d => d.target.id);
            .data(links, d => d.target.data.id.split(":")[1])

          // Enter any new links at the parent's previous position.
          const linkEnter = link.enter().append("path")
              .attr("d", d => {
                const o = {x: source.x0, y: source.y0};
                return diagonal({source: o, target: o});
              });
          
          // Transition links to their new position.
          link.merge(linkEnter).transition(transition)
              .attr("d", diagonal);

          // Transition exiting nodes to the parent's new position.
          link.exit().transition(transition).remove()
              .attr("d", d => {
                const o = {x: source.x, y: source.y};
                return diagonal({source: o, target: o});
              });

          // Stash the old positions for transition.
          root.eachBefore(d => {
            d.x0 = d.x;
            d.y0 = d.y;
          });
        }
      
      root.x0 = dy / 2;
      root.y0 = 0;
      root.descendants().forEach((d, i) => {
        d.id = i;
        d._children = d.children;
      });


      {% if vocabulary.inverse_inScheme | length > 1000 %}

        function toggleL1(d) {
          d.children.forEach(toggleAll);
        }

        function toggleAll(d) {
          if (d.children) {
            d.children.forEach(toggleAll);
            toggle(d);
          }
        }

        // Toggle children.
        function toggle(d) {
          if (d.children) {
            d._children = d.children;
            d.children = null;
          } else {
            d.children = d._children;
            d._children = null;
          }
        }

        // Initialize the display to show only the first level
        root.children.forEach(toggleL1);

      {% endif %}

      update(null, root);

      svg.node();
  
</script>

{# breadcrumb #}
<script>
  
</script>

{# timeline #}
<script type="text/javascript">

</script>