
{# generic method to render any JSON-LD object or value. #}
{# Tests the structure of the object/value and apply the adequate rendering function #}
{# Unbox single values from arrays if needed, so that arrays with a single value are treated the same as the value itself. #}
{% macro render(object) %}
    {% set obj = object | unboxArray %}

    {% if obj is null %}
        null
    {% elif obj | isIriPrefixed(context) %}
        {# expands the prefixed URI and print it #}
        {{ renderPlainUri(obj | expandUri(context)) }}
    {% elif obj | isIriString(context) %}
        {{ renderPlainUri(obj) }}
    {% elif obj | isIriObjectWithOnlyType(context) %}
        {{ renderPlainUri(obj.id | expandUri(context)) }}
    {% elif obj | isLiteralString or obj | isLiteralObject %}
        {{ renderLiteral(obj) }}
    {% elif obj | isObjectWithSingleLabelProperty %}
        {{ renderObjectWithSingleLabelProperty(obj) }}
    {% else %}
        {{ renderObject(obj) }}
    {% endif %}
{% endmacro %}

{% macro renderPlainUri(uri) %}
    <a href="{{ uri | toUrl | relative(page) }}" class="hyperlink">{{uri | shortenUri(context) }}</a>
{% endmacro %}

{% macro renderLabelledUri(uri, labelHtml) %}
  <a href="{{ uri | toUrl | relative(page) }}" class="hyperlink">{{labelHtml}}</a>
{% endmacro %}

{% macro renderObject(object) %}
    <div class="entity">
        {% for predicate, value in object %}
          {{ renderPredicateValues(predicate, value) }}
        {% endfor %}
    </div>
{% endmacro %}


{% macro renderPredicateValues(predicate, values) %}
  <div class="entity-predicate">
    <div class="entity-predicate-predicate">
      {{ renderPredicate(predicate) }}
    </div>
    <div class="entity-predicate-values">
        {% if values|isArray %}
            {# Special : multiple type values are rendered horizontally #}
            {% if predicate == "type" or predicate == "@type" %}
                <div class="entity-predicate-values-value entity-predicate-values-type">
                    {{ renderAsList(values) }}
                </div>
            {% else %}
                {% for item in values %}
                    <div class="entity-predicate-values-value">{{ render(item) }}</div>
                {% endfor %}
            {% endif %}
        {% else %}
            <div class="entity-predicate-values-value">{{ render(values) }}</div>
        {% endif %}
    </div>
  </div>
{% endmacro %}


{% macro renderPredicate(predicate) %}
    <div class="entity-predicate-predicate-title">
        {# expand and shorten so that specific keys e.g. label_fr are turned back into namespaced URI #}
        {% set formattedPredicate = predicate | expandUri(context) | shortenUri(context) %}
        {% set description = "" %}

        <span class="label" title="{{ description }}" data-comment="{{ description }}" data-i18n="{{predicate}}"></span>
        <br />
        <span class="info-icon" title="{{description}}">ℹ️</span><code class="uri">({{formattedPredicate}})</code>
    </div>
{% endmacro %}

{% macro renderLiteral(literal) %}
    {% if literal is string %}
        <span class="literal">{{ literal }}</span>
    {% elif '@language' in literal or '@type' in literal or 'language' in literal or 'type' in literal %}
        {% set value = literal['@value'] or literal['value'] %}
        {% set langOrType = literal['@language'] or literal['@type'] or literal['language'] or literal['type'] %}
        {# special : if we find html tags inside, don't print the datatype - because value may contain HTML rendering, typically <p>, and the <sup> would be on a new line #}
        {% if not (langOrType == "rdf:XMLLiteral") %}
            <span class="literal">{{ value | safe | stripHtmlPrefix }}&nbsp;<sup>({{ langOrType }})</sup></span>
        {% else %}
            <span class="literal">{{ value | safe | stripHtmlPrefix }}</span>
        {% endif %}
    {% else %}
        {# should not happen #}
        {{ literal | json }}
    {% endif %}
{% endmacro %}

{% macro renderObjectWithSingleLabelProperty(object) %}
    {% set labelProperty = object | extractFirstNonIdNonTypeProperty | unboxArray %}
    {% set labelHtml = renderLiteral(labelProperty) %}
    {{ renderLabelledUri(object.id | expandUri(context), labelHtml) }}
{% endmacro %}

{% macro renderLiteralAsString(literal) %}
    {% if literal is string %}
        {{ literal }}
    {% elif '@language' in literal or '@type' in literal or 'language' in literal or 'type' in literal %}
        {% set value = literal['@value'] or literal['value'] %}
        {{ value | safe | stripHtmlPrefix }}
    {% else %}
        {# don't know what to do #}
        {{ literal }}
    {% endif %}
{% endmacro %}

{% macro renderAsList(valueArray) %}
    {% for item in valueArray %}
        {{ render(item) }}
        {% if not loop.last %}, {% endif %}
    {% endfor %}
{% endmacro %}